import { inject, injectable } from "inversify";
import { DependencyBreadcrumb } from "../models/DependencyTree";
import {
  PackageVulnerability,
  VulnerableDependency,
} from "../models/PackageVulnerability";
import { VulnerabilityStore } from "../stores/VulnerabilityStore";
import { Logger, LoggerFactory } from "../utils/LoggerFactory";
import { TreeFlattener } from "./TreeFlattener";
import { TreeResolver } from "./TreeResolver";
import { VulnerabilityChecker } from "./VulnerabilityChecker";
import { gte, lt } from "semver";

@injectable()
export class SimpleVulnerabilityChecker implements VulnerabilityChecker {
  private readonly log: Logger;

  private static isVulnerable(
    breadcrumb: DependencyBreadcrumb,
    vulnerability: PackageVulnerability
  ): boolean {
    return (
      gte(breadcrumb.resolvedVersion, vulnerability.fromVersion) &&
      (!vulnerability.fixedInVersion ||
        lt(breadcrumb.resolvedVersion, vulnerability.fixedInVersion))
    );
  }

  constructor(
    @inject("LoggerFactory") readonly loggerFactory: LoggerFactory,
    @inject("TreeResolver") private readonly treeResolver: TreeResolver,
    @inject("TreeFlattener") private readonly treeFlattener: TreeFlattener,
    @inject("VulnerabilityStore")
    private readonly vulnerabilityStore: VulnerabilityStore
  ) {
    this.log = loggerFactory.getLogger(SimpleVulnerabilityChecker.name);
  }

  async checkVulnerabilities(
    name: string,
    version: string
  ): Promise<VulnerableDependency[]> {
    const tree = await this.treeResolver.getDependencyTree(name, version);

    const flatTree = await this.treeFlattener.flattenTree(tree);

    const vulnerabilities = await this.vulnerabilityStore.getAllVulnerabilities(
      Object.keys(flatTree)
    );

    return vulnerabilities.flatMap((vulnerability) => {
      return (flatTree[vulnerability.name] || [])
        .filter((breadcrumb) =>
          SimpleVulnerabilityChecker.isVulnerable(breadcrumb, vulnerability)
        )
        .map((breadcrumb) => ({
          breadcrumb,
          vulnerability,
        }));
    });
  }
}
